'use strict';
/** 
 * Simplify Framework - CodeGen {{GeneratorVersion}}
 * GitHub URL   : https://github.com/simplify-framework
 * ProjectName  : {{ProjectName}}
 * License      : Apache-2.0 (Free)
 */
const path = require('path')
const fs = require('fs')
const opName = `ExternalResource`
const simplify = require('simplify-sdk')
const provider = require('simplify-sdk/provider')
var nodeArgs = process.argv.slice(2);
var configResourceDeletion = false
var configInputFile = process.env.RESOURCE_INPUT || "resource-input.json"
while (nodeArgs.length > 0) {
    if (nodeArgs[0] == "--input" || nodeArgs[0] == "-i") {
        configInputFile = nodeArgs[1]
        nodeArgs = nodeArgs.slice(2);
    } else if (nodeArgs[0] == "--deletion" || nodeArgs[0] == "-d") {
        configResourceDeletion = true
        nodeArgs = nodeArgs.slice(1);
    }
}
try {
    var config = simplify.getInputConfig(path.join(__dirname, configInputFile))
    const distYamlFile = path.join(__dirname, config.Deployment.Definition)
    const bucketName = config.Bucket.Name
    const bucketKey = config.Bucket.Key
    provider.setConfig(config).then(function () {
        if (configResourceDeletion) {
            simplify.consoleWithMessage(`${opName}-CleanupResource`, `Deployment Name - (${config.Deployment.Name})`)
            simplify.deleteStackOnComplete({
                adaptor: provider.getResource(),
                ...{
                    stackName: config.Deployment.Name
                }
            }).then(function (stackData) {
                simplify.deleteDeploymentBucket({ adaptor: provider.getStorage(), bucketName: bucketName }).then(function() {
                    simplify.consoleWithMessage(`${opName}-CleanupBucket`, `Resource Cleanned.`)
                }).catch(err => simplify.finishWithErrors(`${opName}-CleanupBucket`, err))
            }).catch(function(err) {
                simplify.finishWithErrors(`${opName}-CleanupResource:`, err)
            })
        } else {
            simplify.uploadLocalFile({
                adaptor: provider.getStorage(),
                ...{ bucketKey: bucketKey, inputLocalFile: distYamlFile }
            }).then(function (uploadInfo) {
                var TemplateURL = uploadInfo.Location
                var parameters = {}
                simplify.createOrUpdateStackOnComplete({
                    adaptor: provider.getResource(),
                    ...{
                        stackName: config.Deployment.Name,
                        stackParameters: {
                            DeploymentStage: 'latest',
                            ...parameters
                        },
                        stackTemplate: TemplateURL
                    }
                }).then(function (stackData) {
                    try {
                        fs.writeFileSync(config.output, JSON.stringify(stackData.Outputs, null, 4));
                    } catch (err) {
                        simplify.finishWithErrors(`${opName}-WriteOutput`, err.message)
                    }
                }, function (err) {
                    simplify.finishWithErrors(`${opName}-CreateResources`, err.message || err.StackId)
                })
            }, function (err) {
                simplify.finishWithErrors(`${opName}-UploadDirectory`, err)
            })
        }
    }).catch(function (err) {
        simplify.finishWithErrors(`${opName}-LoadCredentials`, err)
    })
} catch (err) {
    simplify.finishWithErrors(`${opName}-LoadConfig`, err)
}